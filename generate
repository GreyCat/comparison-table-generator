#!/usr/bin/env ruby

require 'optparse'

class HTMLTableGenerator
	DEFAULT_LANG = 'en'

	def initialize(options, out)
		@dir = options[:dir]
		@out = out

		@topics = []
		@topic_names = {}

		@lang = options[:lang] || DEFAULT_LANG
		options[:topics] = "#{@dir}/topics-#{@lang}" unless options[:topics]

		File.open(options[:topics], 'r') { |f|
			f.each_line { |l|
				l.chomp!
				topic, name = l.split(/\t/)
				@topics << topic
				@topic_names[topic] = name
			}
		}

		@global_name = File.open("#{@dir}/desc-#{@lang}").read.chomp
	end

	def run
		global_header
		recurse_dir(1, @dir)
		global_footer
	end

	def global_header
		@out.puts <<__EOF__
<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<title>#{@global_name}</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width">

	<link rel="stylesheet" href="css/normalize.css">
	<link rel="stylesheet" href="css/main.css">
	<link rel="stylesheet" href="css/comparison.css">
	<script src="js/vendor/modernizr-2.6.1.min.js"></script>
	<script src="js/comparison.js"></script>
</head>
<body>
<h1>#{@global_name}</h1>
<div class="comparison-header">
	<ul>
__EOF__
		@topics.each_with_index { |t, i|
			@out.puts "\t\t<li><input type=\"checkbox\" checked=\"1\" onclick=\"javascript:switchColumn(this, #{i + 1});\"/> #{@topic_names[t]}</li>"
		}
		@out.puts <<__EOF__
	</ul>
</div>
<table class="comparison" id="comparison">
<tr class="topic-header">
	<th/>
__EOF__
		@topics.each { |t|
			@out.puts "\t<th>#{@topic_names[t]}</th>"
		}
		@out.puts '</tr>'
	end

	def global_footer
		@out.puts <<__EOF__
</table>
</body>
</html>
__EOF__
	end

	def recurse_dir(depth, dir)
		Dir.glob("#{dir}/*").sort.each { |d|
			next unless FileTest.directory?(d)
			process_dir(depth, d)
			recurse_dir(depth + 1, d)
		}
	end

	def process_dir(depth, dir)
		desc = File.open("#{dir}/desc-#{@lang}").read.chomp
		only_header = true
		data = {}
		@topics.each { |t|
			fn = "#{dir}/#{t}"
			if FileTest.readable?(fn)
				data[t] = File.open(fn).read.chomp
				only_header = false
			end
		}

		if only_header
			@out.puts <<__EOF__
<tr class="header#{depth}">
	<th colspan="#{@topics.length + 1}">#{desc}</th>
</tr>
__EOF__
		else
			@out.puts '<tr class="data">'
			@out.puts "\t<th>#{desc}</th>"
			@topics.each { |t|
				s = data[t]
				s = '?' if s.nil?
				@out.puts "\t<td><pre>#{s}</pre></td>"
			}
			@out.puts '</tr>'
		end
	end
end

options = {}
parser = OptionParser.new { |opts|
	opts.banner = 'Usage: generate [options] <base-dir>'

	opts.on('-t', '--topics=FILE', 'Topic dictionary file') { |a| options[:topics] = a }
	opts.on('-l', '--lang=CODE', 'Language to use in output') { |a| options[:lang] = a }
}
parser.parse!

unless ARGV.length == 1
	puts parser
	exit 1
end
options[:dir] = ARGV[0]

HTMLTableGenerator.new(options, $stdout).run
