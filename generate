#!/usr/bin/env ruby
# -*- coding: UTF-8 -*-

# Ruby 1.8 compatiblity hack
unless Kernel.respond_to?(:require_relative)
	module Kernel
		def require_relative(path)
			require File.join(File.dirname(caller[0]), path.to_str)
		end
	end
end

require 'optparse'
require 'fileutils'

require_relative 'htmltablegenerator'
require_relative 'generator'

DEFAULT_LANG = 'en'

class Counters
	attr_accessor :total
	attr_accessor :empty
	attr_accessor :no_ref

	def initialize
		@total = 0
		@empty = 0
		@no_ref = 0
	end

	def to_s
		sprintf '%d (%d%% empty, %d%% w/o ref)', @total, @empty * 100.0 / @total, @no_ref * 100.0 / @total
	end
end

options = {
	:out => 'out',
	:style => 'style',
}
parser = OptionParser.new { |opts|
	opts.banner = 'Usage: generate [options] <base-dir>'

	opts.on('-t', '--topics=FILE', 'Topic dictionary file') { |a| options[:topics] = a }
	opts.on('-l', '--lang=CODE', 'Language to use in output') { |a| options[:lang] = a }
	opts.on('-o', '--out=DIR', "Output directory (default: #{options[:out]})") { |a| options[:out] = a }
	opts.on('-s', '--style=DIR', "Style template directory (default: #{options[:style]})") { |a| options[:style] = a }
}
parser.parse!

unless ARGV.length == 1
	puts parser
	exit 1
end
options[:dir] = ARGV[0]

Generator.new(options).run
