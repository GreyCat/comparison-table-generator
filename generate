#!/usr/bin/env ruby

require 'optparse'

class Counters
	attr_accessor :total
	attr_accessor :empty
	attr_accessor :no_ref

	def initialize
		@total = 0
		@empty = 0
		@no_ref = 0
	end

	def to_s
		sprintf '%d (%d%% empty, %d%% w/o ref)', @total, @empty * 100.0 / @total, @no_ref * 100.0 / @total
	end
end

class HTMLTableGenerator
	DEFAULT_LANG = 'en'

	def initialize(options, out)
		@dir = options[:dir]
		@out = out

		@topics = []
		@topic_names = {}
		@stat = { '_total' => Counters.new }

		@lang = options[:lang] || DEFAULT_LANG
		options[:topics] = "#{@dir}/topics-#{@lang}" unless options[:topics]

		File.open(options[:topics], 'r') { |f|
			f.each_line { |l|
				l.chomp!
				topic, name = l.split(/\t/)
				@topics << topic
				@topic_names[topic] = name
				@stat[topic] = Counters.new
			}
		}

		@global_name = File.open("#{@dir}/desc-#{@lang}").read.chomp

	end

	def run
		global_header
		recurse_dir(1, @dir)
		global_footer
	end

	def global_header
		@out.puts <<__EOF__
<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<title>#{@global_name}</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width">

	<link rel="stylesheet" href="css/normalize.css">
	<link rel="stylesheet" href="css/main.css">
	<link rel="stylesheet" href="css/comparison.css">
	<script src="js/vendor/modernizr-2.6.1.min.js"></script>
	<script src="js/comparison.js"></script>
</head>
<body onload="javascript:loadSelected();">
<h1>#{@global_name}</h1>
<div class="comparison-header">
	<ul>
__EOF__
		@topics.each_with_index { |t, i|
			@out.puts "\t\t<li><input id=\"check-#{t}\" type=\"checkbox\" checked=\"1\" onclick=\"javascript:switchColumn(this, #{i + 1});\"/> #{@topic_names[t]}</li>"
		}
		@out.puts <<__EOF__
	</ul>
</div>
<table class="comparison" id="comparison">
<tr class="topic-header">
	<th/>
__EOF__
		@topics.each { |t|
			@out.puts "\t<th id=\"column-#{t}\">#{@topic_names[t]}</th>"
		}
		@out.puts '</tr>'
	end

	def global_footer
		@out.puts <<__EOF__
</table>
<!--
Statistics:
__EOF__
		@stat.keys.sort.each { |k|
			@out.printf "%25s: %s\n", k, @stat[k]
		}
		@out.puts <<__EOF__
-->
</body>
</html>
__EOF__
	end

	def recurse_dir(depth, dir)
		Dir.glob("#{dir}/*").sort.each { |d|
			next unless FileTest.directory?(d)
			process_dir(depth, d)
			recurse_dir(depth + 1, d)
		}
	end

	def process_dir(depth, dir)
		desc = File.open("#{dir}/desc-#{@lang}").read.chomp
		only_header = true
		data = {}
		@topics.each { |t|
			fn = "#{dir}/#{t}"
			if FileTest.readable?(fn)
				data[t] = File.open(fn).read.chomp
				only_header = false
			end
		}

		if only_header
			@out.puts <<__EOF__
<tr class="header#{depth}">
	<th colspan="#{@topics.length + 1}">#{desc}</th>
</tr>
__EOF__
		else
			@out.puts '<tr class="data">'
			@out.puts "\t<th>#{desc}</th>"
			@topics.each { |t|
				@stat['_total'].total += 1
				@stat[t].total += 1

				refs_layout = ''
				fn = "#{dir}/#{t}-ref"
				if FileTest.readable?(fn)
					refs = File.open(fn).readlines
					refs_layout = refs.map { |x|
						"<a class=\"reflink\" href=\"#{x.chomp}\">?</a>"
					}.join
				end

				s = data[t]
				if s.nil?
					s = '?'
					@stat['_total'].empty += 1
					@stat[t].empty += 1
				end

				if refs_layout == ''
					@stat['_total'].no_ref += 1
					@stat[t].no_ref += 1
				end

				# Special tags that influence cell styles: must be come first
				css_class = nil
				case s
				when /^<yes\s*\/?>(.*)$/mi
					css_class = 'cell_yes'
					s = "<div class=\"cell_symbol\">\u2611</div>\n#{$1}"
				when /^<no\s*\/?>(.*)$/mi
					css_class = 'cell_no'
					s = "<div class=\"cell_symbol\">\u2610</div>\n#{$1}"
				when /^<na\s*\/?>(.*)$/mi
					css_class = 'cell_na'
					s = "<div class=\"cell_symbol\">N/A</div>\n#{$1}"
				end
				css_layout = css_class ? " class=\"#{css_class}\"" : ''

				@out.puts "\t<td#{css_layout}>#{refs_layout}#{s}</td>"
			}
			@out.puts '</tr>'
		end
	end
end

options = {}
parser = OptionParser.new { |opts|
	opts.banner = 'Usage: generate [options] <base-dir>'

	opts.on('-t', '--topics=FILE', 'Topic dictionary file') { |a| options[:topics] = a }
	opts.on('-l', '--lang=CODE', 'Language to use in output') { |a| options[:lang] = a }
}
parser.parse!

unless ARGV.length == 1
	puts parser
	exit 1
end
options[:dir] = ARGV[0]

HTMLTableGenerator.new(options, $stdout).run
